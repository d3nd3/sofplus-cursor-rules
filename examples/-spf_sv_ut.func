// SoFplus

// ---------------------------------------------------------------------------
// Unreal Tournament messages and sounds
// ---------------------------------------------------------------------------


//
// Init
//
function spf_sv_ut_init()
{
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_client_begin "spf_sv_ut_on_client_begin"
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_client_die "spf_sv_ut_on_client_die"
  sp_sc_func_exec spf_sc_list_add_func _sp_sv_on_map_end "spf_sv_ut_on_map_end"
}


//
// Client begin
//
function spf_sv_ut_on_client_begin( ~par_slot )
{
  // No kills yet
  set _spf_sv_ut_$~par_slot 0
  set _spf_sv_ut_time_$~par_slot 0
}


//
// Someone died
//
function spf_sv_ut_on_client_die( ~par_slot, ~par_slot_killer, ~par_mod, ~par_flag )
{
  // Was there a killer?
  sp_sc_flow_if number val #~par_slot_killer >= val 0
  {
    // Only count non-teamkills
    sp_sc_flow_if number val #~par_mod <= val 134217727
    {
      // Increment number of kills
      add _spf_sv_ut_$~par_slot_killer 1

      // Remember kill time
      sp_sc_info_time
      sp_sc_flow_if number cvar _spf_sv_ut_time_$~par_slot_killer == val #_sp_sc_info_time_sec
      {
        // Multiple kills in one second
        sp_sv_info_client #~par_slot_killer
        sp_sv_print_sp_broadcast 23 #_sp_sv_info_client_name

        // Sound to client
        sp_sv_sound_client #~par_slot_killer 10
      }
      set _spf_sv_ut_time_$~par_slot_killer #_sp_sc_info_time_sec

      // Some special amount reached?

      // Killing Spree
      sp_sc_flow_if number cvar _spf_sv_ut_$~par_slot_killer == val 5
      {
        // Message to all clients
        sp_sv_info_client #~par_slot_killer
        sp_sv_print_sp_broadcast 22 #_sp_sv_info_client_name

        // Sound to client
        sp_sv_sound_client #~par_slot_killer 5
      }

      // Rampage
      sp_sc_flow_if number cvar _spf_sv_ut_$~par_slot_killer == val 10
      {
        // Message to all clients
        sp_sv_info_client #~par_slot_killer
        sp_sv_print_sp_broadcast 24 #_sp_sv_info_client_name

        // Sound to client
        sp_sv_sound_client #~par_slot_killer 6
      }

      // Dominating
      sp_sc_flow_if number cvar _spf_sv_ut_$~par_slot_killer == val 15
      {
        // Message to all clients
        sp_sv_info_client #~par_slot_killer
        sp_sv_print_sp_broadcast 20 #_sp_sv_info_client_name

        // Sound to client
        sp_sv_sound_client #~par_slot_killer 7
      }

      // Unstoppable
      sp_sc_flow_if number cvar _spf_sv_ut_$~par_slot_killer == val 20
      {
        // Message to all clients
        sp_sv_info_client #~par_slot_killer
        sp_sv_print_sp_broadcast 25 #_sp_sv_info_client_name

        // Sound to client
        sp_sv_sound_client #~par_slot_killer 8
      }

      // God Like
      sp_sc_flow_if number cvar _spf_sv_ut_$~par_slot_killer == val 25
      {
        // Message to all clients
        sp_sv_info_client #~par_slot_killer
        sp_sv_print_sp_broadcast 21 #_sp_sv_info_client_name

        // Sound to client
        sp_sv_sound_client #~par_slot_killer 9
      }
    }

    // Message if a killing streak ends
    sp_sc_flow_if number cvar _spf_sv_ut_$~par_slot >= val 5
    {
      sp_sv_info_client #~par_slot
      set ~victim #_sp_sv_info_client_name
      sp_sv_info_client #~par_slot_killer
      sp_sc_cvar_copy ~kills _spf_sv_ut_$~par_slot
      sp_sv_print_sp_broadcast 19 #_sp_sv_info_client_name #~victim #~kills
    }
  }

  // Reset counter
  set _spf_sv_ut_$~par_slot 0
}


//
// Map end
//
function spf_sv_ut_on_map_end()
{
  // For CTF
  sp_sc_flow_if number val #deathmatch == val 4
  {
    sp_sc_flow_if number val #_sp_sv_info_num_flags_blue > val #_sp_sv_info_num_flags_red
    {
      // Blue wins
      sp_sv_sound_broadcast 11
    }
    else
    {
      sp_sc_flow_if number val #_sp_sv_info_num_flags_blue < val #_sp_sv_info_num_flags_red
      {
        // Red wins
        sp_sv_sound_broadcast 12
      }
      //else
      //{
        // It's a tie
      //}
    }
  }
}
